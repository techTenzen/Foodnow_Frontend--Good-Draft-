// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  CUSTOMER
  RESTAURANT_OWNER
  ADMIN
}

enum RestaurantStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum OrderStatus {
  PLACED
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum FeedbackType {
  REVIEW
  COMPLAINT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses   Address[]
  orders      Order[]
  restaurant  Restaurant?
  feedback    Feedback[]

  @@map("users")
}

model Restaurant {
  id                String           @id @default(cuid())
  name              String
  description       String?
  cuisineType       String
  address           String
  city              String
  state             String
  pincode           String
  phone             String
  email             String           @unique
  image             String?
  rating            Float            @default(0)
  totalRatings      Int              @default(0)
  priceForTwo       Int
  deliveryTime      String           @default("30-40 mins")
  isOpen            Boolean          @default(true)
  acceptingOrders   Boolean          @default(true)
  status            RestaurantStatus @default(PENDING)
  establishmentDate DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  ownerId    String @unique
  owner      User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  menuItems  MenuItem[]
  orders     Order[]
  feedback   Feedback[]
  offers     RestaurantOffer[]

  @@map("restaurants")
}

model RestaurantOffer {
  id           String @id @default(cuid())
  title        String
  description  String?
  isActive     Boolean @default(true)
  
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("restaurant_offers")
}

model MenuItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  category    String
  isVegetarian Boolean @default(false)
  isAvailable Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]

  @@map("menu_items")
}

model Address {
  id        String  @id @default(cuid())
  type      String  // HOME, WORK, OTHER
  address   String
  landmark  String?
  city      String
  state     String
  pincode   String
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PLACED)
  totalAmount     Float
  deliveryFee     Float       @default(40)
  taxAmount       Float
  grandTotal      Float
  paymentMethod   String      // CARD, UPI, COD
  paymentStatus   String      @default("PENDING")
  specialInstructions String?
  estimatedDeliveryTime String?
  actualDeliveryTime DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  customerId     String
  customer       User       @relation(fields: [customerId], references: [id])
  restaurantId   String
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id])
  deliveryAddressId String
  deliveryAddress Address   @relation(fields: [deliveryAddressId], references: [id])
  orderItems     OrderItem[]
  feedback       Feedback?

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float
  subtotal Float

  // Relations
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Feedback {
  id       String       @id @default(cuid())
  type     FeedbackType
  rating   Int?         // 1-5 stars for reviews
  title    String
  message  String
  status   String       @default("PENDING") // PENDING, IN_PROGRESS, RESOLVED
  priority String       @default("LOW")     // LOW, MEDIUM, HIGH, URGENT
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  customerId   String
  customer     User       @relation(fields: [customerId], references: [id])
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  orderId      String?    @unique
  order        Order?     @relation(fields: [orderId], references: [id])

  @@map("feedback")
}